name: Deploy to AWS EC2

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: tourism
  IMAGE_TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build common-model
        run: |
          cd common-model
          mvn clean install -DskipTests

      - name: Build and push services
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd services
          mvn clean package -DskipTests
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-services:$IMAGE_TAG -f ../Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-services:$IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create app directory if it doesn't exist
            mkdir -p ~/tourism-app
            cd ~/tourism-app
            
            # Copy Dockerfile content
            cat << 'EOF' > Dockerfile
            FROM eclipse-temurin:21-jre-jammy
            WORKDIR /app
            COPY services/target/*.jar app.jar
            ENV SPRING_PROFILES_ACTIVE=prod
            EXPOSE 8080
            ENTRYPOINT ["java", "-jar", "app.jar"]
            EOF
            
            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
            
            # Create docker-compose.yml
            cat << EOF > docker-compose.prod.yml
            # [El resto de tu configuraci√≥n docker-compose actual]
            EOF
            
            # Deploy
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
            docker image prune -af